<!-- Containerul principal pentru layout-ul colecției personalizate -->
<div id="custom-filter-app" 
     data-collection-id="{{ collection.id }}"
     data-shop="{{ shop.permanent_domain }}">
  <div class="custom-collection-layout">
    <!-- Coloana stângă: Filtrare -->
    <div class="custom-collection-filters">
      <div id="custom-filter-ui">
        <h2>Filtrează Produsele</h2>
        <!-- Filtrele vor fi adăugate dinamic prin JavaScript -->
      </div>
    </div>

    <!-- Coloana dreaptă: Lista de produse -->
    <div class="custom-collection-products">
      <div id="custom-product-grid">
        <!-- Produsele vor fi adăugate dinamic prin JavaScript -->
      </div>
    </div>
  </div>
</div>

{{ 'my-custom-filter-app.css' | asset_url | stylesheet_tag }}
{{ 'my-custom-filter-app.js' | asset_url | script_tag }}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Extragem toate metafieldurile unice din produse
    const products = document.querySelectorAll('.product-card');
    const metafieldsMap = new Map();

    products.forEach(product => {
      const metafields = JSON.parse(product.dataset.metafields || '{}');
      Object.entries(metafields).forEach(([key, value]) => {
        if (!metafieldsMap.has(key)) {
          metafieldsMap.set(key, new Set());
        }
        metafieldsMap.get(key).add(value);
      });
    });

    // Creăm filtrele pentru metafielduri
    const metafieldsContainer = document.getElementById('metafields-container');
    metafieldsMap.forEach((values, key) => {
      const filterSection = document.createElement('div');
      filterSection.className = 'metafield-filter';
      filterSection.innerHTML = `
        <h4>${key}</h4>
        <select class="metafield-select" data-key="${key}">
          <option value="">Toate valorile</option>
          ${Array.from(values).map(value => `
            <option value="${value}">${value}</option>
          `).join('')}
        </select>
      `;
      metafieldsContainer.appendChild(filterSection);
    });

    // Funcția de filtrare
    function filterProducts() {
      const selectedVendor = document.getElementById('vendor-filter').value;
      const minPrice = parseFloat(document.getElementById('min-price').value) || 0;
      const maxPrice = parseFloat(document.getElementById('max-price').value) || Infinity;
      const selectedTags = Array.from(document.querySelectorAll('.tag-input:checked')).map(cb => cb.value);
      const selectedMetafields = Array.from(document.querySelectorAll('.metafield-select')).reduce((acc, select) => {
        if (select.value) {
          acc[select.dataset.key] = select.value;
        }
        return acc;
      }, {});

      products.forEach(product => {
        const productVendor = product.dataset.vendor;
        const productPrice = parseFloat(product.dataset.price);
        const productTags = product.dataset.tags.split(',');
        const productMetafields = JSON.parse(product.dataset.metafields || '{}');

        const matchesVendor = !selectedVendor || productVendor === selectedVendor;
        const matchesPrice = productPrice >= minPrice && productPrice <= maxPrice;
        const matchesTags = selectedTags.length === 0 || selectedTags.some(tag => productTags.includes(tag));
        const matchesMetafields = Object.entries(selectedMetafields).every(([key, value]) => 
          productMetafields[key] === value
        );

        product.style.display = matchesVendor && matchesPrice && matchesTags && matchesMetafields ? 'block' : 'none';
      });
    }

    // Adăugăm event listeners pentru toate filtrele
    document.getElementById('vendor-filter').addEventListener('change', filterProducts);
    document.getElementById('min-price').addEventListener('input', filterProducts);
    document.getElementById('max-price').addEventListener('input', filterProducts);
    document.querySelectorAll('.tag-input').forEach(checkbox => {
      checkbox.addEventListener('change', filterProducts);
    });
    document.querySelectorAll('.metafield-select').forEach(select => {
      select.addEventListener('change', filterProducts);
    });
  });
</script>

<style>
  .custom-collection-layout {
    display: flex;
    gap: 20px;
    padding: 20px;
  }

  .custom-collection-filters {
    width: 250px;
    padding: 15px;
    background: #f5f5f5;
    border-radius: 8px;
  }

  .filter-section {
    margin-bottom: 20px;
  }

  .filter-section h3 {
    margin-bottom: 10px;
    font-size: 16px;
    font-weight: bold;
  }

  .filter-select, .price-input, .metafield-select {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .price-range {
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .tags-container {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .tag-checkbox {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .metafield-filter {
    margin-bottom: 15px;
  }

  .metafield-filter h4 {
    margin-bottom: 8px;
    font-size: 14px;
    color: #666;
  }

  .custom-collection-products {
    flex: 1;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
  }

  .product-card {
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background: white;
  }
</style>

